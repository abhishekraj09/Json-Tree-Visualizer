{"ast":null,"code":"import dagre from \"dagre\";\nconst nodeWidth = 180;\nconst nodeHeight = 60;\nfunction getLayoutedElements(nodes, edges, direction = \"TB\") {\n  const dagreGraph = new dagre.graphlib.Graph();\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({\n    rankdir: direction,\n    nodesep: 80,\n    ranksep: 100\n  });\n  nodes.forEach(node => {\n    dagreGraph.setNode(node.id, {\n      width: nodeWidth,\n      height: nodeHeight\n    });\n  });\n  edges.forEach(edge => {\n    dagreGraph.setEdge(edge.source, edge.target);\n  });\n  dagre.layout(dagreGraph);\n  const layoutedNodes = nodes.map(node => {\n    const nodeWithPosition = dagreGraph.node(node.id);\n    node.targetPosition = isHorizontal ? \"left\" : \"top\";\n    node.sourcePosition = isHorizontal ? \"right\" : \"bottom\";\n    node.position = {\n      x: nodeWithPosition.x - nodeWidth / 2,\n      y: nodeWithPosition.y - nodeHeight / 2\n    };\n    return node;\n  });\n  return {\n    nodes: layoutedNodes,\n    edges\n  };\n}\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n  function visit(value, path = \"$\", label = \"root\", parent = null) {\n    const id = sanitizeId(path);\n    const raw = typeof value === \"object\" && value !== null ? JSON.stringify(value) : String(value);\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw,\n        path,\n        value\n      },\n      position: {\n        x: 0,\n        y: 0\n      } // placeholder\n    });\n    if (parent) {\n      edges.push({\n        id: `e-${parent}-${id}`,\n        source: parent,\n        target: id\n      });\n    }\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, `[${idx}]`, id));\n      } else {\n        Object.keys(value).forEach(k => visit(value[k], `${path}.${k}`, k, id));\n      }\n    }\n  }\n  visit(rootObj);\n  return getLayoutedElements(nodes, edges, \"TB\"); // Top → Bottom tree layout\n}","map":{"version":3,"names":["dagre","nodeWidth","nodeHeight","getLayoutedElements","nodes","edges","direction","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","nodesep","ranksep","forEach","node","setNode","id","width","height","edge","setEdge","source","target","layout","layoutedNodes","map","nodeWithPosition","targetPosition","sourcePosition","position","x","y","jsonToFlow","rootObj","sanitizeId","path","replace","visit","value","label","parent","raw","JSON","stringify","String","push","data","Array","isArray","item","idx","Object","keys","k"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["import dagre from \"dagre\";\n\nconst nodeWidth = 180;\nconst nodeHeight = 60;\n\nfunction getLayoutedElements(nodes, edges, direction = \"TB\") {\n  const dagreGraph = new dagre.graphlib.Graph();\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({ rankdir: direction, nodesep: 80, ranksep: 100 });\n\n  nodes.forEach((node) => {\n    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\n  });\n  edges.forEach((edge) => {\n    dagreGraph.setEdge(edge.source, edge.target);\n  });\n\n  dagre.layout(dagreGraph);\n\n  const layoutedNodes = nodes.map((node) => {\n    const nodeWithPosition = dagreGraph.node(node.id);\n    node.targetPosition = isHorizontal ? \"left\" : \"top\";\n    node.sourcePosition = isHorizontal ? \"right\" : \"bottom\";\n    node.position = {\n      x: nodeWithPosition.x - nodeWidth / 2,\n      y: nodeWithPosition.y - nodeHeight / 2,\n    };\n    return node;\n  });\n\n  return { nodes: layoutedNodes, edges };\n}\n\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n\n  function visit(value, path = \"$\", label = \"root\", parent = null) {\n    const id = sanitizeId(path);\n    const raw =\n      typeof value === \"object\" && value !== null\n        ? JSON.stringify(value)\n        : String(value);\n\n    nodes.push({\n      id,\n      data: { label, raw, path, value },\n      position: { x: 0, y: 0 }, // placeholder\n    });\n\n    if (parent) {\n      edges.push({\n        id: `e-${parent}-${id}`,\n        source: parent,\n        target: id,\n      });\n    }\n\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) =>\n          visit(item, `${path}[${idx}]`, `[${idx}]`, id)\n        );\n      } else {\n        Object.keys(value).forEach((k) =>\n          visit(value[k], `${path}.${k}`, k, id)\n        );\n      }\n    }\n  }\n\n  visit(rootObj);\n  return getLayoutedElements(nodes, edges, \"TB\"); // Top → Bottom tree layout\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}