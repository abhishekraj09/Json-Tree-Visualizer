{"ast":null,"code":"import dagre from \"dagre\";\nconst nodeWidth = 180;\nconst nodeHeight = 60;\nfunction layoutElements(nodes, edges, direction = \"TB\") {\n  const dagreGraph = new dagre.graphlib.Graph();\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({\n    rankdir: direction,\n    // \"TB\" = top-bottom, \"LR\" = left-right\n    nodesep: 100,\n    ranksep: 120\n  });\n  nodes.forEach(node => {\n    dagreGraph.setNode(node.id, {\n      width: nodeWidth,\n      height: nodeHeight\n    });\n  });\n  edges.forEach(edge => dagreGraph.setEdge(edge.source, edge.target));\n  dagre.layout(dagreGraph);\n  nodes.forEach(node => {\n    const layoutedNode = dagreGraph.node(node.id);\n    node.targetPosition = isHorizontal ? \"left\" : \"top\";\n    node.sourcePosition = isHorizontal ? \"right\" : \"bottom\";\n    node.position = {\n      x: layoutedNode.x - nodeWidth / 2,\n      y: layoutedNode.y - nodeHeight / 2\n    };\n  });\n  return {\n    nodes,\n    edges\n  };\n}\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n  function traverse(value, path = \"$\", label = \"root\", parentId = null) {\n    const id = sanitizeId(path);\n    const raw = typeof value === \"object\" && value !== null ? JSON.stringify(value) : String(value);\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw,\n        path,\n        value\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    });\n    if (parentId) {\n      edges.push({\n        id: `e-${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: \"smoothstep\"\n      });\n    }\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => traverse(item, `${path}[${idx}]`, `[${idx}]`, id));\n      } else {\n        Object.keys(value).forEach(key => traverse(value[key], `${path}.${key}`, key, id));\n      }\n    }\n  }\n  traverse(rootObj);\n  return layoutElements(nodes, edges, \"TB\"); // Top to Bottom layout\n}","map":{"version":3,"names":["dagre","nodeWidth","nodeHeight","layoutElements","nodes","edges","direction","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","nodesep","ranksep","forEach","node","setNode","id","width","height","edge","setEdge","source","target","layout","layoutedNode","targetPosition","sourcePosition","position","x","y","jsonToFlow","rootObj","sanitizeId","path","replace","traverse","value","label","parentId","raw","JSON","stringify","String","push","data","type","Array","isArray","item","idx","Object","keys","key"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["import dagre from \"dagre\";\n\nconst nodeWidth = 180;\nconst nodeHeight = 60;\n\nfunction layoutElements(nodes, edges, direction = \"TB\") {\n  const dagreGraph = new dagre.graphlib.Graph();\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({\n    rankdir: direction, // \"TB\" = top-bottom, \"LR\" = left-right\n    nodesep: 100,\n    ranksep: 120,\n  });\n\n  nodes.forEach((node) => {\n    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\n  });\n  edges.forEach((edge) => dagreGraph.setEdge(edge.source, edge.target));\n\n  dagre.layout(dagreGraph);\n\n  nodes.forEach((node) => {\n    const layoutedNode = dagreGraph.node(node.id);\n    node.targetPosition = isHorizontal ? \"left\" : \"top\";\n    node.sourcePosition = isHorizontal ? \"right\" : \"bottom\";\n    node.position = {\n      x: layoutedNode.x - nodeWidth / 2,\n      y: layoutedNode.y - nodeHeight / 2,\n    };\n  });\n\n  return { nodes, edges };\n}\n\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n\n  function traverse(value, path = \"$\", label = \"root\", parentId = null) {\n    const id = sanitizeId(path);\n    const raw =\n      typeof value === \"object\" && value !== null\n        ? JSON.stringify(value)\n        : String(value);\n\n    nodes.push({\n      id,\n      data: { label, raw, path, value },\n      position: { x: 0, y: 0 },\n    });\n\n    if (parentId) {\n      edges.push({\n        id: `e-${parentId}-${id}`,\n        source: parentId,\n        target: id,\n        type: \"smoothstep\",\n      });\n    }\n\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) =>\n          traverse(item, `${path}[${idx}]`, `[${idx}]`, id)\n        );\n      } else {\n        Object.keys(value).forEach((key) =>\n          traverse(value[key], `${path}.${key}`, key, id)\n        );\n      }\n    }\n  }\n\n  traverse(rootObj);\n  return layoutElements(nodes, edges, \"TB\"); // Top to Bottom layout\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}