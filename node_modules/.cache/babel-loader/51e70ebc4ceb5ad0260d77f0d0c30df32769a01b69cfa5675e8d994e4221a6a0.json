{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\OneDrive\\\\Desktop\\\\JSON TREE VISUALIZER\\\\json-tree-visualizer\\\\src\\\\components\\\\FlowTree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo } from \"react\";\nimport ReactFlow, { Background, Controls, MiniMap } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\n// Function to choose node color by value type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getNodeColor = value => {\n  if (value === null) return \"#ffb74d\"; // null → orange\n  if (Array.isArray(value)) return \"#4caf50\"; // array → green\n  if (typeof value === \"object\") return \"#7e57c2\"; // object → purple\n  return \"#fb8c00\"; // primitive → amber\n};\n\n// Custom Node with hover tooltip\nconst CustomNode = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"group relative\",\n  style: {\n    padding: 10,\n    borderRadius: 8,\n    backgroundColor: data.bg,\n    color: \"#fff\",\n    fontSize: 13,\n    textAlign: \"center\",\n    minWidth: 120,\n    cursor: \"pointer\",\n    boxShadow: \"0 3px 6px rgba(0,0,0,0.2)\"\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontWeight: 600\n    },\n    children: data.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute hidden group-hover:block bg-black text-white text-xs rounded px-2 py-1\",\n    style: {\n      top: \"110%\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      whiteSpace: \"nowrap\",\n      zIndex: 20,\n      maxWidth: 200,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), \" \", data.path]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Value:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \" \", typeof data.value === \"object\" ? JSON.stringify(data.value) : String(data.value)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this);\n_c = CustomNode;\nexport default function FlowTree({\n  nodes,\n  edges,\n  onNodeClick\n}) {\n  _s();\n  const nodeTypes = useMemo(() => ({\n    custom: CustomNode\n  }), []);\n\n  // Ensure each node gets a background color\n  const formattedNodes = useMemo(() => nodes.map(n => {\n    var _n$data;\n    return {\n      ...n,\n      type: \"custom\",\n      data: {\n        ...n.data,\n        bg: getNodeColor((_n$data = n.data) === null || _n$data === void 0 ? void 0 : _n$data.value)\n      }\n    };\n  }), [nodes]);\n  const handleNodeClick = useCallback((evt, node) => {\n    onNodeClick === null || onNodeClick === void 0 ? void 0 : onNodeClick(evt, node);\n  }, [onNodeClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full w-full\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: formattedNodes,\n      edges: edges,\n      nodeTypes: nodeTypes,\n      onNodeClick: handleNodeClick,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => {\n          var _n$data2;\n          return ((_n$data2 = n.data) === null || _n$data2 === void 0 ? void 0 : _n$data2.bg) || \"#ccc\";\n        },\n        nodeStrokeColor: \"#333\",\n        nodeBorderRadius: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        showZoom: false,\n        showFitView: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowTree, \"Gp1s73+WlAXsupqAApSEaT9tZh0=\");\n_c2 = FlowTree;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"FlowTree\");","map":{"version":3,"names":["React","useCallback","useMemo","ReactFlow","Background","Controls","MiniMap","jsxDEV","_jsxDEV","getNodeColor","value","Array","isArray","CustomNode","data","className","style","padding","borderRadius","backgroundColor","bg","color","fontSize","textAlign","minWidth","cursor","boxShadow","children","fontWeight","label","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","whiteSpace","zIndex","maxWidth","overflow","textOverflow","path","JSON","stringify","String","_c","FlowTree","nodes","edges","onNodeClick","_s","nodeTypes","custom","formattedNodes","map","n","_n$data","type","handleNodeClick","evt","node","fitView","nodeColor","_n$data2","nodeStrokeColor","nodeBorderRadius","showZoom","showFitView","_c2","$RefreshReg$"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/components/FlowTree.jsx"],"sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport ReactFlow, { Background, Controls, MiniMap } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\n// Function to choose node color by value type\nconst getNodeColor = (value) => {\n  if (value === null) return \"#ffb74d\"; // null → orange\n  if (Array.isArray(value)) return \"#4caf50\"; // array → green\n  if (typeof value === \"object\") return \"#7e57c2\"; // object → purple\n  return \"#fb8c00\"; // primitive → amber\n};\n\n// Custom Node with hover tooltip\nconst CustomNode = ({ data }) => (\n  <div\n    className=\"group relative\"\n    style={{\n      padding: 10,\n      borderRadius: 8,\n      backgroundColor: data.bg,\n      color: \"#fff\",\n      fontSize: 13,\n      textAlign: \"center\",\n      minWidth: 120,\n      cursor: \"pointer\",\n      boxShadow: \"0 3px 6px rgba(0,0,0,0.2)\",\n    }}\n  >\n    <div style={{ fontWeight: 600 }}>{data.label}</div>\n\n    {/* Tooltip on hover */}\n    <div\n      className=\"absolute hidden group-hover:block bg-black text-white text-xs rounded px-2 py-1\"\n      style={{\n        top: \"110%\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        whiteSpace: \"nowrap\",\n        zIndex: 20,\n        maxWidth: 200,\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n      }}\n    >\n      <div>\n        <strong>Path:</strong> {data.path}\n      </div>\n      <div>\n        <strong>Value:</strong>{\" \"}\n        {typeof data.value === \"object\"\n          ? JSON.stringify(data.value)\n          : String(data.value)}\n      </div>\n    </div>\n  </div>\n);\n\nexport default function FlowTree({ nodes, edges, onNodeClick }) {\n  const nodeTypes = useMemo(() => ({ custom: CustomNode }), []);\n\n  // Ensure each node gets a background color\n  const formattedNodes = useMemo(\n    () =>\n      nodes.map((n) => ({\n        ...n,\n        type: \"custom\",\n        data: { ...n.data, bg: getNodeColor(n.data?.value) },\n      })),\n    [nodes]\n  );\n\n  const handleNodeClick = useCallback(\n    (evt, node) => {\n      onNodeClick?.(evt, node);\n    },\n    [onNodeClick]\n  );\n\n  return (\n    <div className=\"h-full w-full\">\n      <ReactFlow\n        nodes={formattedNodes}\n        edges={edges}\n        nodeTypes={nodeTypes}\n        onNodeClick={handleNodeClick}\n        fitView\n      >\n        <Background />\n        <MiniMap\n          nodeColor={(n) => n.data?.bg || \"#ccc\"}\n          nodeStrokeColor=\"#333\"\n          nodeBorderRadius={2}\n        />\n        <Controls showZoom={false} showFitView={false} />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}