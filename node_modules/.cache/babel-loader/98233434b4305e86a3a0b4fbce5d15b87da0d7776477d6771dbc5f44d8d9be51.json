{"ast":null,"code":"export function jsonToFlow(rootObj) {\n  let nodes = [];\n  let edges = [];\n  let counter = 0;\n  function safeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n  function visit(value, path = \"root\", depth = 0, label = null, parent = null) {\n    const id = safeId(path);\n    const nodeLabel = label === null ? \"root\" : String(label);\n    const position = {\n      x: depth * 250,\n      y: counter * 100\n    };\n    counter += 1;\n    nodes.push({\n      id,\n      position,\n      data: {\n        label: nodeLabel,\n        path,\n        value\n      }\n    });\n    if (parent) {\n      const safeParent = safeId(parent);\n      edges.push({\n        id: `e-${safeParent}-${id}`,\n        source: safeParent,\n        target: id\n      });\n    }\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, i) => visit(item, `${path}_${i}`, depth + 1, `[${i}]`, path));\n      } else {\n        Object.keys(value).forEach(k => visit(value[k], `${path}_${k}`, depth + 1, k, path));\n      }\n    }\n  }\n  visit(rootObj);\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["jsonToFlow","rootObj","nodes","edges","counter","safeId","path","replace","visit","value","depth","label","parent","id","nodeLabel","String","position","x","y","push","data","safeParent","source","target","Array","isArray","forEach","item","i","Object","keys","k"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["export function jsonToFlow(rootObj) {\n  let nodes = [];\n  let edges = [];\n  let counter = 0;\n\n  function safeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n  }\n\n  function visit(value, path = \"root\", depth = 0, label = null, parent = null) {\n    const id = safeId(path);\n    const nodeLabel = label === null ? \"root\" : String(label);\n    const position = { x: depth * 250, y: counter * 100 };\n    counter += 1;\n\n    nodes.push({\n      id,\n      position,\n      data: { label: nodeLabel, path, value },\n    });\n\n    if (parent) {\n      const safeParent = safeId(parent);\n      edges.push({ id: `e-${safeParent}-${id}`, source: safeParent, target: id });\n    }\n\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, i) =>\n          visit(item, `${path}_${i}`, depth + 1, `[${i}]`, path)\n        );\n      } else {\n        Object.keys(value).forEach((k) =>\n          visit(value[k], `${path}_${k}`, depth + 1, k, path)\n        );\n      }\n    }\n  }\n\n  visit(rootObj);\n  return { nodes, edges };\n}\n"],"mappings":"AAAA,OAAO,SAASA,UAAUA,CAACC,OAAO,EAAE;EAClC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,OAAO,GAAG,CAAC;EAEf,SAASC,MAAMA,CAACC,IAAI,EAAE;IACpB,OAAOA,IAAI,CAACC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC;EAC5C;EAEA,SAASC,KAAKA,CAACC,KAAK,EAAEH,IAAI,GAAG,MAAM,EAAEI,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,IAAI,EAAEC,MAAM,GAAG,IAAI,EAAE;IAC3E,MAAMC,EAAE,GAAGR,MAAM,CAACC,IAAI,CAAC;IACvB,MAAMQ,SAAS,GAAGH,KAAK,KAAK,IAAI,GAAG,MAAM,GAAGI,MAAM,CAACJ,KAAK,CAAC;IACzD,MAAMK,QAAQ,GAAG;MAAEC,CAAC,EAAEP,KAAK,GAAG,GAAG;MAAEQ,CAAC,EAAEd,OAAO,GAAG;IAAI,CAAC;IACrDA,OAAO,IAAI,CAAC;IAEZF,KAAK,CAACiB,IAAI,CAAC;MACTN,EAAE;MACFG,QAAQ;MACRI,IAAI,EAAE;QAAET,KAAK,EAAEG,SAAS;QAAER,IAAI;QAAEG;MAAM;IACxC,CAAC,CAAC;IAEF,IAAIG,MAAM,EAAE;MACV,MAAMS,UAAU,GAAGhB,MAAM,CAACO,MAAM,CAAC;MACjCT,KAAK,CAACgB,IAAI,CAAC;QAAEN,EAAE,EAAE,KAAKQ,UAAU,IAAIR,EAAE,EAAE;QAAES,MAAM,EAAED,UAAU;QAAEE,MAAM,EAAEV;MAAG,CAAC,CAAC;IAC7E;IAEA,IAAIJ,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACtC,IAAIe,KAAK,CAACC,OAAO,CAAChB,KAAK,CAAC,EAAE;QACxBA,KAAK,CAACiB,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KACpBpB,KAAK,CAACmB,IAAI,EAAE,GAAGrB,IAAI,IAAIsB,CAAC,EAAE,EAAElB,KAAK,GAAG,CAAC,EAAE,IAAIkB,CAAC,GAAG,EAAEtB,IAAI,CACvD,CAAC;MACH,CAAC,MAAM;QACLuB,MAAM,CAACC,IAAI,CAACrB,KAAK,CAAC,CAACiB,OAAO,CAAEK,CAAC,IAC3BvB,KAAK,CAACC,KAAK,CAACsB,CAAC,CAAC,EAAE,GAAGzB,IAAI,IAAIyB,CAAC,EAAE,EAAErB,KAAK,GAAG,CAAC,EAAEqB,CAAC,EAAEzB,IAAI,CACpD,CAAC;MACH;IACF;EACF;EAEAE,KAAK,CAACP,OAAO,CAAC;EACd,OAAO;IAAEC,KAAK;IAAEC;EAAM,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}