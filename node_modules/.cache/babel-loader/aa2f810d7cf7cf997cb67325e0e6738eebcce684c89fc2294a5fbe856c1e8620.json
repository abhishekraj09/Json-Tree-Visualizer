{"ast":null,"code":"import dagre from 'dagre';\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  const g = new dagre.graphlib.Graph();\n  g.setGraph({\n    rankdir: 'TB',\n    nodesep: 50,\n    ranksep: 100\n  }); // TB = top-to-bottom\n  g.setDefaultEdgeLabel(() => ({}));\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, '_');\n  }\n  function visit(value, path = '$', label = 'root', parentId = null) {\n    const id = sanitizeId(path);\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw: typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value),\n        value,\n        path\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    });\n    g.setNode(id, {\n      width: 150,\n      height: 50\n    });\n    if (parentId) {\n      edges.push({\n        id: `e-${parentId}-${id}`,\n        source: parentId,\n        target: id\n      });\n      g.setEdge(parentId, id);\n    }\n    if (value && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, `[${idx}]`, id));\n      } else {\n        Object.keys(value).forEach(key => visit(value[key], `${path}.${key}`, key, id));\n      }\n    }\n  }\n\n  // Traverse JSON\n  visit(rootObj);\n\n  // Compute layout positions\n  dagre.layout(g);\n\n  // Apply dagre-computed positions\n  g.nodes().forEach(nodeId => {\n    const node = g.node(nodeId);\n    const target = nodes.find(n => n.id === nodeId);\n    if (target) {\n      target.position = {\n        x: node.x,\n        y: node.y\n      };\n    }\n  });\n  console.log('✅ Nodes:', nodes);\n  console.log('✅ Edges:', edges);\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["dagre","jsonToFlow","rootObj","nodes","edges","g","graphlib","Graph","setGraph","rankdir","nodesep","ranksep","setDefaultEdgeLabel","sanitizeId","path","replace","visit","value","label","parentId","id","push","data","raw","JSON","stringify","String","position","x","y","setNode","width","height","source","target","setEdge","Array","isArray","forEach","item","idx","Object","keys","key","layout","nodeId","node","find","n","console","log"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["import dagre from 'dagre';\n\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  const g = new dagre.graphlib.Graph();\n  g.setGraph({ rankdir: 'TB', nodesep: 50, ranksep: 100 }); // TB = top-to-bottom\n  g.setDefaultEdgeLabel(() => ({}));\n\n  function sanitizeId(path) {\n    return path.replace(/[^a-zA-Z0-9_]/g, '_');\n  }\n\n  function visit(value, path = '$', label = 'root', parentId = null) {\n    const id = sanitizeId(path);\n\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw:\n          typeof value === 'object' && value !== null\n            ? JSON.stringify(value)\n            : String(value),\n        value,\n        path,\n      },\n      position: { x: 0, y: 0 },\n    });\n\n    g.setNode(id, { width: 150, height: 50 });\n\n    if (parentId) {\n      edges.push({\n        id: `e-${parentId}-${id}`,\n        source: parentId,\n        target: id,\n      });\n      g.setEdge(parentId, id);\n    }\n\n    if (value && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) =>\n          visit(item, `${path}[${idx}]`, `[${idx}]`, id)\n        );\n      } else {\n        Object.keys(value).forEach((key) =>\n          visit(value[key], `${path}.${key}`, key, id)\n        );\n      }\n    }\n  }\n\n  // Traverse JSON\n  visit(rootObj);\n\n  // Compute layout positions\n  dagre.layout(g);\n\n  // Apply dagre-computed positions\n  g.nodes().forEach((nodeId) => {\n    const node = g.node(nodeId);\n    const target = nodes.find((n) => n.id === nodeId);\n    if (target) {\n      target.position = { x: node.x, y: node.y };\n    }\n  });\n\n  console.log('✅ Nodes:', nodes);\n  console.log('✅ Edges:', edges);\n  return { nodes, edges };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}