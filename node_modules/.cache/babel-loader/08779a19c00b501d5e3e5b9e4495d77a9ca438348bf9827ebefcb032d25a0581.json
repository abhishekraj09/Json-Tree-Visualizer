{"ast":null,"code":"import dagre from \"dagre\";\nconst nodeWidth = 160;\nconst nodeHeight = 50;\nfunction safeId(path) {\n  return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n}\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  const g = new dagre.graphlib.Graph();\n  g.setDefaultEdgeLabel(() => ({}));\n  g.setGraph({\n    rankdir: \"TB\",\n    nodesep: 50,\n    ranksep: 100\n  });\n  function visit(value, path = \"$\", label = \"root\", parent = null) {\n    const id = safeId(path);\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw: typeof value === \"object\" && value !== null ? JSON.stringify(value) : String(value),\n        value,\n        path\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    });\n    g.setNode(id, {\n      width: nodeWidth,\n      height: nodeHeight\n    });\n    if (parent) {\n      edges.push({\n        id: `e-${parent}-${id}`,\n        source: parent,\n        target: id\n      });\n      g.setEdge(parent, id);\n    }\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, `[${idx}]`, id));\n      } else {\n        Object.keys(value).forEach(k => visit(value[k], `${path}.${k}`, k, id));\n      }\n    }\n  }\n  visit(rootObj, \"$\", \"root\", null);\n\n  // layout\n  dagre.layout(g);\n  g.nodes().forEach(n => {\n    const nodeLayout = g.node(n);\n    const target = nodes.find(x => x.id === n);\n    if (target) {\n      target.position = {\n        x: nodeLayout.x - nodeWidth / 2,\n        y: nodeLayout.y - nodeHeight / 2\n      };\n    }\n  });\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["dagre","nodeWidth","nodeHeight","safeId","path","replace","jsonToFlow","rootObj","nodes","edges","g","graphlib","Graph","setDefaultEdgeLabel","setGraph","rankdir","nodesep","ranksep","visit","value","label","parent","id","push","data","raw","JSON","stringify","String","position","x","y","setNode","width","height","source","target","setEdge","Array","isArray","forEach","item","idx","Object","keys","k","layout","n","nodeLayout","node","find"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["import dagre from \"dagre\";\n\nconst nodeWidth = 160;\nconst nodeHeight = 50;\n\nfunction safeId(path) {\n  return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n}\n\nexport function jsonToFlow(rootObj) {\n  const nodes = [];\n  const edges = [];\n  const g = new dagre.graphlib.Graph();\n  g.setDefaultEdgeLabel(() => ({}));\n  g.setGraph({ rankdir: \"TB\", nodesep: 50, ranksep: 100 });\n\n  function visit(value, path = \"$\", label = \"root\", parent = null) {\n    const id = safeId(path);\n    nodes.push({\n      id,\n      data: {\n        label,\n        raw: typeof value === \"object\" && value !== null ? JSON.stringify(value) : String(value),\n        value,\n        path\n      },\n      position: { x: 0, y: 0 }\n    });\n\n    g.setNode(id, { width: nodeWidth, height: nodeHeight });\n\n    if (parent) {\n      edges.push({ id: `e-${parent}-${id}`, source: parent, target: id });\n      g.setEdge(parent, id);\n    }\n\n    if (value && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, `[${idx}]`, id));\n      } else {\n        Object.keys(value).forEach((k) => visit(value[k], `${path}.${k}`, k, id));\n      }\n    }\n  }\n\n  visit(rootObj, \"$\", \"root\", null);\n\n  // layout\n  dagre.layout(g);\n  g.nodes().forEach((n) => {\n    const nodeLayout = g.node(n);\n    const target = nodes.find(x => x.id === n);\n    if (target) {\n      target.position = { x: nodeLayout.x - nodeWidth / 2, y: nodeLayout.y - nodeHeight / 2 };\n    }\n  });\n\n  return { nodes, edges };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}