{"ast":null,"code":"import dagre from \"dagre\";\nexport function jsonToFlow(rootObj) {\n  let nodes = [];\n  let edges = [];\n  const safeId = path => path.replace(/[^a-zA-Z0-9_\\-$]/g, \"_\");\n  function visit(value, path = \"$\", parent = null) {\n    const id = safeId(path);\n    const nodeLabel = path === \"$\" ? \"root\" : path.split(\".\").pop();\n    const raw = typeof value === \"object\" && value !== null ? JSON.stringify(value) : String(value);\n\n    // 🎨 Node color logic\n    let bgColor = \"#a78bfa\"; // default (purple)\n    if (Array.isArray(value)) bgColor = \"#4ade80\"; // green for arrays\n    else if (value === null || typeof value !== \"object\") bgColor = \"#fbbf24\"; // yellow/orange for primitives\n\n    // 🧩 Push node\n    nodes.push({\n      id,\n      data: {\n        label: nodeLabel,\n        path,\n        value,\n        raw\n      },\n      position: {\n        x: 0,\n        y: 0\n      },\n      style: {\n        backgroundColor: bgColor,\n        color: \"#000\",\n        border: \"2px solid #333\",\n        borderRadius: 8,\n        padding: 8,\n        fontSize: 12,\n        fontWeight: 500,\n        textAlign: \"center\",\n        minWidth: 100\n      }\n    });\n\n    // 🔗 Create edge if has parent\n    if (parent) {\n      edges.push({\n        id: `e-${safeId(parent)}-${id}`,\n        source: safeId(parent),\n        target: id,\n        animated: true,\n        style: {\n          stroke: \"#64748b\",\n          strokeWidth: 2\n        }\n      });\n    }\n\n    // 👇 Recursive traversal\n    if (value !== null && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, path));\n      } else {\n        Object.keys(value).forEach(key => visit(value[key], `${path}.${key}`, path));\n      }\n    }\n  }\n  visit(rootObj);\n\n  // ⚙️ Layout using dagre\n  const g = new dagre.graphlib.Graph();\n  g.setGraph({\n    rankdir: \"TB\",\n    nodesep: 100,\n    ranksep: 100\n  });\n  g.setDefaultEdgeLabel(() => ({}));\n  nodes.forEach(n => g.setNode(n.id, {\n    width: 180,\n    height: 50\n  }));\n  edges.forEach(e => g.setEdge(e.source, e.target));\n  dagre.layout(g);\n  nodes = nodes.map(n => {\n    const pos = g.node(n.id);\n    return {\n      ...n,\n      position: {\n        x: pos.x,\n        y: pos.y\n      }\n    };\n  });\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["dagre","jsonToFlow","rootObj","nodes","edges","safeId","path","replace","visit","value","parent","id","nodeLabel","split","pop","raw","JSON","stringify","String","bgColor","Array","isArray","push","data","label","position","x","y","style","backgroundColor","color","border","borderRadius","padding","fontSize","fontWeight","textAlign","minWidth","source","target","animated","stroke","strokeWidth","forEach","item","idx","Object","keys","key","g","graphlib","Graph","setGraph","rankdir","nodesep","ranksep","setDefaultEdgeLabel","n","setNode","width","height","e","setEdge","layout","map","pos","node"],"sources":["C:/Users/abhis/OneDrive/Desktop/JSON TREE VISUALIZER/json-tree-visualizer/src/utils/jsonToFlow.js"],"sourcesContent":["import dagre from \"dagre\";\n\nexport function jsonToFlow(rootObj) {\n  let nodes = [];\n  let edges = [];\n\n  const safeId = (path) => path.replace(/[^a-zA-Z0-9_\\-$]/g, \"_\");\n\n  function visit(value, path = \"$\", parent = null) {\n    const id = safeId(path);\n    const nodeLabel = path === \"$\" ? \"root\" : path.split(\".\").pop();\n    const raw =\n      typeof value === \"object\" && value !== null\n        ? JSON.stringify(value)\n        : String(value);\n\n    // 🎨 Node color logic\n    let bgColor = \"#a78bfa\"; // default (purple)\n    if (Array.isArray(value)) bgColor = \"#4ade80\"; // green for arrays\n    else if (value === null || typeof value !== \"object\") bgColor = \"#fbbf24\"; // yellow/orange for primitives\n\n    // 🧩 Push node\n    nodes.push({\n      id,\n      data: { label: nodeLabel, path, value, raw },\n      position: { x: 0, y: 0 },\n      style: {\n        backgroundColor: bgColor,\n        color: \"#000\",\n        border: \"2px solid #333\",\n        borderRadius: 8,\n        padding: 8,\n        fontSize: 12,\n        fontWeight: 500,\n        textAlign: \"center\",\n        minWidth: 100,\n      },\n    });\n\n    // 🔗 Create edge if has parent\n    if (parent) {\n      edges.push({\n        id: `e-${safeId(parent)}-${id}`,\n        source: safeId(parent),\n        target: id,\n        animated: true,\n        style: { stroke: \"#64748b\", strokeWidth: 2 },\n      });\n    }\n\n    // 👇 Recursive traversal\n    if (value !== null && typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach((item, idx) => visit(item, `${path}[${idx}]`, path));\n      } else {\n        Object.keys(value).forEach((key) =>\n          visit(value[key], `${path}.${key}`, path)\n        );\n      }\n    }\n  }\n\n  visit(rootObj);\n\n  // ⚙️ Layout using dagre\n  const g = new dagre.graphlib.Graph();\n  g.setGraph({ rankdir: \"TB\", nodesep: 100, ranksep: 100 });\n  g.setDefaultEdgeLabel(() => ({}));\n\n  nodes.forEach((n) => g.setNode(n.id, { width: 180, height: 50 }));\n  edges.forEach((e) => g.setEdge(e.source, e.target));\n  dagre.layout(g);\n\n  nodes = nodes.map((n) => {\n    const pos = g.node(n.id);\n    return { ...n, position: { x: pos.x, y: pos.y } };\n  });\n\n  return { nodes, edges };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}